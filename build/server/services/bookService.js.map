{"version":3,"sources":["../../../api/server/services/bookService.js"],"names":["BookService","database","Book","findAll","book","create","id","findOne","where","Number","bookToUpdate","update","destroy","deletedBook"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;AACJ;;;;;;;;;;;;;uBAKiBC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;AAMjB;;;;;;;;;;;qDAKqBC,I;;;;;;;uBAEJH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,IAArB,C;;;;;;;;;;;;;;;;;;;;;;;;AAMjB;;;;;;;;;;;qDAKwBE,E,EAAIF,I;;;;;;;;uBAEGH,mBAASC,IAAT,CAAcK,OAAd,CAAsB;AAC/CC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADwC,iBAAtB,C;;;AAArBI,gBAAAA,Y;;qBAGFA,Y;;;;;;uBACIT,mBAASC,IAAT,CAAcS,MAAd,CAAqBP,IAArB,EAA2B;AAC/BI,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADwB,iBAA3B,C;;;kDAGCF,I;;;;;;;;;;;;;;;;;;;;;;;;;AAMb;;;;;;;;;;qDAIqBE,E;;;;;;;;uBAEEL,mBAASC,IAAT,CAAcK,OAAd,CAAsB;AACvCC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADgC,iBAAtB,C;;;AAAbF,gBAAAA,I;kDAGCA,I;;;;;;;;;;;;;;;;;;;;AAIX;;;;;;;;;;qDAIwBE,E;;;;;;;;uBAEDL,mBAASC,IAAT,CAAcK,OAAd,CAAsB;AACvCC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADgC,iBAAtB,C;;;AAAbF,gBAAAA,I;;qBAGFA,I;;;;;;uBACwBH,mBAASC,IAAT,CAAcU,OAAd,CAAsB;AAC9CJ,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADuC,iBAAtB,C;;;AAApBO,gBAAAA,W;kDAGCA,W;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOEb,W","sourcesContent":["import database from \"../src/models\";\n\nclass BookService {\n  /**\n   * @returns {Promise<JSON>}\n   */\n  static async getAllBooks() {\n    try {\n      return await database.Book.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   *\n   * @param {JSON} book\n   * @returns {JSON}\n   */\n  static async addBook(book) {\n    try {\n      return await database.Book.create(book);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * @param {Number} id\n   * @param {JSON} book\n   * @returns {Promise<JSON>}\n   */\n  static async updateBook(id, book) {\n    try {\n      const bookToUpdate = await database.Book.findOne({\n        where: { id: Number(id) }\n      });\n      if (bookToUpdate) {\n        await database.Book.update(book, {\n          where: { id: Number(id) }\n        });\n        return book;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  /**\n   * @param {Number} id\n   * @returns {Promise<JSON>}\n   */\n  static async getBook(id) {\n    try {\n      const book = await database.Book.findOne({\n        where: { id: Number(id) }\n      });\n      return book;\n    } catch (error) {}\n  }\n\n  /**\n   * @param {Number} id\n   * @returns {null}\n   */\n  static async deleteBook(id) {\n    try {\n      const book = await database.Book.findOne({\n        where: { id: Number(id) }\n      });\n      if (book) {\n        const deletedBook = await database.Book.destroy({\n          where: { id: Number(id) }\n        });\n        return deletedBook;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default BookService;\n"],"file":"bookService.js"}