{"version":3,"sources":["../../../../api/server/src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","ConfigJson","console","log","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASSWORD","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAGC,iBAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AACA,IAAMC,MAAM,GAAGC,mBAAWJ,GAAX,CAAf;AAEAK,OAAO,CAACC,GAAR,sBAA0BN,GAA1B;AAEA,IAAMO,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIL,MAAM,CAACM,WAAP,KAAuB,YAA3B,EAAyC;AACvCD,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CAAcT,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACQ,gBAAnB,CAAd,EAAoDR,MAApD,CAAZ;AACAK,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVT,OAAO,CAACD,GAAR,CAAYY,OADF,EAEVX,OAAO,CAACD,GAAR,CAAYa,OAFF,EAGVZ,OAAO,CAACD,GAAR,CAAYc,WAHF,EAIV;AACEC,IAAAA,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OADpB;AAEEC,IAAAA,IAAI,EAAEhB,OAAO,CAACD,GAAR,CAAYkB,OAFpB;AAGEC,IAAAA,OAAO,EAAE,UAHX;AAIEC,IAAAA,aAAa,EAAE;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAa,gBAAQ;AAArB,KAJjB;AAKEC,IAAAA,OAAO,EAAE;AALX,GAJU,CAAZ;AAYD,CAdD,MAcO;AACLd,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVP,MAAM,CAACoB,QADG,EAEVpB,MAAM,CAACqB,QAFG,EAGVrB,MAAM,CAACsB,QAHG,EAIVtB,MAJU,CAAZ;AAMD;;AAEDuB,eAAGC,WAAH,CAAeC,SAAf,EACGC,MADH,CACU,UAAAC,IAAI,EAAI;AACd,SACEA,IAAI,CAACC,OAAL,CAAa,QAAQ,CAArB,KAA2BD,IAAI,KAAKjC,QAApC,IAAgDiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADrE;AAGD,CALH,EAMGC,OANH,CAMW,UAAAH,IAAI,EAAI;AACf,MAAMI,KAAK,GAAG1B,SAAS,UAAT,CAAiBV,iBAAKqC,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAvB,EAAAA,EAAE,CAAC2B,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACD,CATH;;AAWAG,MAAM,CAACC,IAAP,CAAY/B,EAAZ,EAAgB0B,OAAhB,CAAwB,UAAAM,SAAS,EAAI;AACnC,MAAIhC,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BjC,IAAAA,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAd,CAAwBjC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport Sequelize from \"sequelize\";\nimport ConfigJson from \"../config/config\";\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : \"development\";\nconst config = ConfigJson[env];\n\nconsole.log(`Welcome to ${env} environment`);\n\nconst db = {};\n\nlet sequelize;\nif (config.environment === \"production\") {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n  sequelize = new Sequelize(\n    process.env.DB_NAME,\n    process.env.DB_USER,\n    process.env.DB_PASSWORD,\n    {\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      dialect: \"postgres\",\n      dialectOption: { ssl: true, native: true },\n      logging: true\n    }\n  );\n} else {\n  sequelize = new Sequelize(\n    config.database,\n    config.username,\n    config.password,\n    config\n  );\n}\n\nfs.readdirSync(__dirname)\n  .filter(file => {\n    return (\n      file.indexOf(\".\" !== 0) && file !== basename && file.slice(-3) === \".js\"\n    );\n  })\n  .forEach(file => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"],"file":"index.js"}