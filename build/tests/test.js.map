{"version":3,"sources":["../../api/tests/test.js"],"names":["describe","it","book","title","price","description","chai","request","app","post","set","send","res","status","to","equal","body","data","include","id","get","deep","length","be","at","least","bookId","have","property","message","updateBook","put"],"mappings":"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","sourcesContent":["import { chai, app, expect } from \"./testConfig\";\n\ndescribe(\"Testing book endpoints\", () => {\n  describe(\"POST /api/v1/books\", () => {\n    it(\"Should create a book\", async () => {\n      const book = {\n        title: \"Thinks Fall Apart\",\n        price: \"1000\",\n        description: \"Africa's best seller\"\n      };\n      let res = await chai\n        .request(app)\n        .post(\"/api/v1/books\")\n        .set(\"Accept\", \"application/json\")\n        .send(book);\n      /**tests */\n      expect(res.status).to.equal(201);\n      expect(res.body.data).to.include({\n        id: 1,\n        title: book.title,\n        price: book.price,\n        description: book.description\n      });\n    });\n\n    it(\"Should not create a book with incomplete parameters\", async () => {\n      const book = {\n        title: \"Thinks Fall Apart\",\n        price: \"1000\"\n      };\n      let res = await chai\n        .request(app)\n        .post(\"/api/v1/books\")\n        .set(\"Accept\", \"application/json\")\n        .send(book);\n\n      /**tests */\n      expect(res.status).to.equal(400);\n      expect(res.body).to.include({\n        status: \"error\"\n      });\n    });\n\n    it(\"Should retrieve all books\", async () => {\n      const { body } = await chai\n        .request(app)\n        .get(\"/api/v1/books\")\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(body.status).to.deep.equal(\"success\");\n      expect(body.data.length).to.be.at.least(1);\n    });\n\n    it(\"Should retrieve a particular book\", async () => {\n      const bookId = 1;\n      const { body } = await chai\n        .request(app)\n        .get(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(body.status).to.deep.equal(\"success\");\n      expect(body.data).to.have.property(\"id\");\n      expect(body.data).to.have.property(\"title\");\n      expect(body.data).to.have.property(\"price\");\n      expect(body.data).to.have.property(\"description\");\n    });\n\n    it(\"Should not retrieve a particular book with an inexistent id\", async () => {\n      const bookId = 1000;\n      const { body } = await chai\n        .request(app)\n        .get(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(`Cannot find book with id ${bookId}`);\n    });\n\n    it(\"Should not retrieve a particular book with an invalid id\", async () => {\n      const bookId = \"one\";\n      const { body } = await chai\n        .request(app)\n        .get(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(\"Input a numerical value\");\n    });\n\n    it(\"Should update a particular book\", async () => {\n      const bookId = 1;\n      const updateBook = {\n        id: bookId,\n        title: \"Arrow of God\",\n        price: \"1100\",\n        description: \"West African delight\"\n      };\n      const res = await chai\n        .request(app)\n        .put(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\")\n        .send(updateBook);\n\n      /**tests */\n      expect(res.status).to.deep.equal(200);\n      expect(res.body.status).to.deep.equal(\"success\");\n      expect(res.body.data).to.have.property(\"title\", \"Arrow of God\");\n      expect(res.body.data).to.have.property(\"price\", \"1100\");\n      expect(res.body.data).to.have.property(\n        \"description\",\n        \"West African delight\"\n      );\n    });\n\n    it(\"Should not update a particular book with an inexistent id\", async () => {\n      const bookId = 1000;\n      const updateBook = {\n        id: bookId,\n        title: \"Sherlock of Holmes\",\n        price: \"2000\",\n        description: \"Keit Knowles\"\n      };\n      const { body } = await chai\n        .request(app)\n        .put(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\")\n        .send(updateBook);\n\n      /**tests */\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(`Cannot find book with id ${bookId}`);\n    });\n\n    it(\"Should not update a particular book with an invalid id\", async () => {\n      const bookId = \"one\";\n      const updateBook = {\n        id: bookId,\n        title: \"Sherlock of Holmes\",\n        price: \"2000\",\n        description: \"Keit Knowles\"\n      };\n      const { body } = await chai\n        .request(app)\n        .put(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\")\n        .send(updateBook);\n\n      /**tests */\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(\"Use a numeric value\");\n    });\n\n    it(\"Should delete a particular book\", async () => {\n      const bookId = 1;\n      const res = await chai\n        .request(app)\n        .delete(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(res.status).to.deep.equal(200);\n      expect(res.body.status).to.deep.equal(\"success\");\n      expect(res.body.message).to.deep.equal(\"Book successfully deleted\");\n    });\n\n    it(\"Should not return an error when there are no books\", async () => {\n      const { status, body } = await chai\n        .request(app)\n        .get(`/api/v1/books`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(status).to.deep.equal(404);\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(\"No books found\");\n    });\n\n    it(\"Should not delete a book with an inexistent id\", async () => {\n      const bookId = 1000;\n      const { status, body } = await chai\n        .request(app)\n        .delete(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(status).to.equal(400);\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(`Book with id ${bookId} not found`);\n    });\n\n    it(\"Should not delete a book with an invalid id\", async () => {\n      const bookId = \"one\";\n      const { status, body } = await chai\n        .request(app)\n        .delete(`/api/v1/books/${bookId}`)\n        .set(\"Accept\", \"application/json\");\n\n      /**tests */\n      expect(status).to.deep.equal(400);\n      expect(body.status).to.deep.equal(\"error\");\n      expect(body.message).to.deep.equal(\"Input a numeric value\");\n    });\n  });\n});\n"],"file":"test.js"}